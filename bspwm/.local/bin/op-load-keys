#!/bin/bash
set -e

if [[ -d "$HOME/.ssh" || -d "$HOME.gnugpg" ]]; then
	echo "detected existing ssh or gpg folder"
	exit 1
fi

eval $(op-login)

mkdir -p $HOME/{.ssh,.gnupg}
chmod 700 $HOME/{.ssh,.gnupg}

cat >$HOME/.gnupg/gpg-agent.conf <<EOF
enable-ssh-support
allow-preset-passphrase
allow-loopback-pinentry
default-cache-ttl 604800
default-cache-ttl-ssh 604800
EOF

mkdir -p $HOME/.config/profile.d

cat >$HOME/.config/profile.d/gpg-ssh-sock.sh <<EOF
export SSH_AGENT_PID=
export SSH_AUTH_SOCK="\${XDG_RUNTIME_DIR}/gnupg/S.gpg-agent.ssh"
EOF

export GPG_TTY=$(tty)

unset SSH_AGENT_PID
if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
	export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
fi

gpg-connect-agent reloadagent /bye
gpg-connect-agent updatestartuptty /bye >/dev/null

cd $HOME/.ssh

op get document "id_rsa - SSH Key" >id_rsa
chmod 600 id_rsa

SSH_PASSPHRASE=$(op get item "SSH Key" --fields password)

echo $SSH_PASSPHRASE | SSH_ASKPASS=$HOME/.local/bin/cat-ask-pass ssh-keygen -y -f id_rsa >id_rsa.pub

cd $HOME

op get document "GPG Private Key" | gpg --import --batch

op get item "GPG Passphrase" --fields password | gpg --pinentry-mode loopback --edit-key BAF8BFFC9F891E84E7C8E986DB3CA2CBFBCAFEC5 trust

# gpg will create a gpg key based on the ssh key and will ask to proect it with
# a passphrase. Put the SSH Passphrase in the clipboard so that it can be used
# protect the gpg-stored ssh key
echo $SSH_PASSPHRASE | xclip -in -selection clipboard

# add ssh key to gpg
echo $SSH_PASSPHRASE | SSH_ASKPASS=$HOME/.local/bin/cat-ask-pass ssh-add $HOME/.ssh/id_rsa

op-authenticate
